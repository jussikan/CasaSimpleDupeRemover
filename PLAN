1. classy solution, with directories hardcoded (in Application.py) and default functionality working -- done

2. add DnD -- done

3. make sure whole set works
    * with 3 physically separate shell scripts -- works
    * with real scripts and real duplicates -- works

4. add possibility to configure -- done, works
    * workDirectory
    * phases
        - having this configurable means app would need to rename possible previous workDirectory, or clean it up.
        - or, have ~/.checksums as baseWorkDirectory, and inside create directories according to pattern checksums-<datetime>, where datetime is the moment the "Find duplicates" button was clicked.

    do testing! -- done.


"Duplicates found" does not appear by a condition thus will not always be truthful.. -> add check for whether duplicates were found for real, or if none were found.
    if none found, block the deletion phase.
    -- nah decided to do some renaming


5. compiling pure python code into bytecode -> py_compile -- done

6. inject all dependencies to all classes

7. component tests, then unit tests
    https://pypi.org/project/macuitest/
    https://circleci.com/docs/testing-macos/
    https://developer.apple.com/documentation/xctest/user_interface_tests


8. design app that
    * has constant (and lazy) PostgreSQL connection
        -> no more shell scripts so performance will be optimal instead of poor
    * supports finding duplicates in 1+ directories
    * can be used without GUI
        -> there must be a service with an API (http?) for also CLI access

    ! should have listing of the duplicate files before deleting any, in order to avoid automatically deleting something that should not be deleted.
        + could mark files as protected
    ! should have option to go scan (or show) only files of certain file size.

9. support pausing & resuming of current process.



py_compile
https://docs.python.org/3/library/py_compile.html


"Nuitka translates the Python modules into a C level program that then uses libpython and static C files of its own to execute in the same way as CPython does"
http://nuitka.net/doc/user-manual.html


DnD
https://pythonguides.com/python-tkinter-drag-and-drop/

https://github.com/hseysen/drag_and_drop/blob/master/drag_and_drop.py


service class
https://python-service.readthedocs.io/en/stable/

socketteja prosessien väliseen kommunikaatioon
https://docs.python.org/3.9/howto/sockets.html#socket-howto
eli GUI & CLI <-> service kommunikaatio
eiks pipe toimis ? -- mikä ettei ?



14.-16.10.2023:

tkinterdnd2:
.drop_target_register(DND_FILES)
-> _tkinter.TclError: invalid command name "macdnd::registerdragwidget"
miksi? epäyhteensopiva kirjastobinääri käytössä? asensin brew'stä.

kokeile myös https://pypi.org/project/python-tkdnd/
    .. eih. sama ongelma ku tkinterdnd2:llä.

pitää googlailla miten (tkinterillä) sais kutsuttua hakemistonvalinta-dialogia.
tkinter.filedialog vissiin.
tiiä ny miten tuon drag&dropin ratkaisis.
jos kokeilis freebsd:ssä et toimiiko siinäkään.

jaha, no nyt ku asens tkinterdnd2-universal pipillä ni dnd-example.py lähti futaa. toimii.

22.10.2023:
eka DnD-versio toimii, ja näyttää hyvältä.
sit pitää hoitaa että pudotettu hakemistopolku menee bin/duperecorder.sh:lle asti -- done

Prosessin (näennäinen) tauottaminen vois olla jees. Signaalit SIGSTOP, SIGCONT hoitaa shelliskriptit.
Jotta prosessin tauottamisen ja jatkamisen mahdollisuudet vois olla mahdollisimman laajat, tauottamistoiminnon pitää olla samaa tyyppiä kuin mitä Phasesille annetaan.
Ehkä pitää toteuttaa Phasesista erillinen juttu, vaikka sitte Pauser & Resumer .. tai ehkä PauseAction & ResumeAction .. ja tuota jatkaen, ihan vaan Action jolla sit eri roolit.
